From 5249eee199ca32b23653d5fdb97ba7809f829f56 Mon Sep 17 00:00:00 2001
Subject: [PATCH] aio

---
 src/settings_pack.cpp | 117 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 117 insertions(+)

diff --git a/src/settings_pack.cpp b/src/settings_pack.cpp
index 18647abac..3a1323429 100644
--- a/src/settings_pack.cpp
+++ b/src/settings_pack.cpp
@@ -634,6 +634,123 @@ namespace libtorrent
 		{
 			ret.set_bool(settings_pack::bool_type_base + i, bool_settings[i].default_value);
 		}
+
+        // don't throttle TCP, assume there is
+        // plenty of bandwidth
+        ret.set_int(settings_pack::mixed_mode_algorithm, settings_pack::prefer_tcp);
+
+        ret.set_int(settings_pack::max_out_request_queue, 1500);
+        ret.set_int(settings_pack::max_allowed_in_request_queue, 2000);
+
+        // we will probably see a high rate of alerts, make it less
+        // likely to loose alerts
+        ret.set_int(settings_pack::alert_queue_size, 10000);
+
+        // allow 500 files open at a time
+        ret.set_int(settings_pack::file_pool_size, 500);
+
+        // don't update access time for each read/write
+        ret.set_bool(settings_pack::no_atime_storage, true);
+
+        // as a seed box, we must accept multiple peers behind
+        // the same NAT
+        ret.set_bool(settings_pack::allow_multiple_connections_per_ip, true);
+
+        // connect to 50 peers per second
+        ret.set_int(settings_pack::connection_speed, 500);
+
+        // allow 8000 peer connections
+        ret.set_int(settings_pack::connections_limit, 8000);
+
+        // allow lots of peers to try to connect simultaneously
+        ret.set_int(settings_pack::listen_queue_size, 3000);
+
+        // unchoke many peers
+        ret.set_int(settings_pack::unchoke_slots_limit, 2000);
+
+        // we need more DHT capacity to ping more peers
+        // candidates before trying to connect
+        ret.set_int(settings_pack::dht_upload_rate_limit, 20000);
+
+        // use 1 GB of cache
+        ret.set_int(settings_pack::cache_size, 32768 * 2);
+        ret.set_bool(settings_pack::use_read_cache, true);
+        ret.set_int(settings_pack::cache_buffer_chunk_size, 0);
+        ret.set_int(settings_pack::read_cache_line_size, 32);
+        ret.set_int(settings_pack::write_cache_line_size, 256);
+        ret.set_bool(settings_pack::low_prio_disk, false);
+        // 30 seconds expiration to save cache
+        // space for active pieces
+        ret.set_int(settings_pack::cache_expiry, 30);
+
+        // in case the OS we're running on doesn't support
+        // readv/writev, allocate contiguous buffers for
+        // reads and writes
+        // disable, since it uses a lot more RAM and a significant
+        // amount of CPU to copy it around
+        ret.set_bool(settings_pack::coalesce_reads, false);
+        ret.set_bool(settings_pack::coalesce_writes, false);
+
+        // the max number of bytes pending write before we throttle
+        // download rate
+        ret.set_int(settings_pack::max_queued_disk_bytes, 7 * 1024 * 1024);
+
+        // prevent fast pieces to interfere with suggested pieces
+        // since we unchoke everyone, we don't need fast pieces anyway
+        ret.set_int(settings_pack::allowed_fast_set_size, 0);
+
+        // suggest pieces in the read cache for higher cache hit rate
+        ret.set_int(settings_pack::suggest_mode, settings_pack::suggest_read_cache);
+
+        ret.set_bool(settings_pack::close_redundant_connections, true);
+
+        ret.set_int(settings_pack::max_rejects, 10);
+
+        ret.set_int(settings_pack::recv_socket_buffer_size, 1024 * 1024);
+        ret.set_int(settings_pack::send_socket_buffer_size, 1024 * 1024);
+
+        // don't let connections linger for too long
+        ret.set_int(settings_pack::request_timeout, 10);
+        ret.set_int(settings_pack::peer_timeout, 20);
+        ret.set_int(settings_pack::inactivity_timeout, 20);
+
+        ret.set_int(settings_pack::active_limit, 20000);
+        ret.set_int(settings_pack::active_tracker_limit, 2000);
+        ret.set_int(settings_pack::active_dht_limit, 600);
+        ret.set_int(settings_pack::active_seeds, 2000);
+
+        ret.set_int(settings_pack::choking_algorithm, settings_pack::fixed_slots_choker);
+
+        // of 500 ms, and a send rate of 4 MB/s, the upper
+        // limit should be 2 MB
+        ret.set_int(settings_pack::send_buffer_watermark, 3 * 1024 * 1024);
+
+        // put 1.5 seconds worth of data in the send buffer
+        // this gives the disk I/O more heads-up on disk
+        // reads, and can maximize throughput
+        ret.set_int(settings_pack::send_buffer_watermark_factor, 150);
+
+        // always stuff at least 1 MiB down each peer
+        // pipe, to quickly ramp up send rates
+        ret.set_int(settings_pack::send_buffer_low_watermark, 1 * 1024 * 1024);
+
+        // don't retry peers if they fail once. Let them
+        // connect to us if they want to
+        ret.set_int(settings_pack::max_failcount, 1);
+
+        // the number of threads to use to call async_write_some
+        // and read_some on peer sockets
+        // this doesn't work. See comment in settings_pack.cpp
+        ret.set_int(settings_pack::network_threads, 0);
+
+        // number of disk threads for low level file operations
+        ret.set_int(settings_pack::aio_threads, 16);
+
+        ret.set_int(settings_pack::checking_mem_usage, 2048);
+
+        // the disk cache performs better with the pool allocator
+        ret.set_bool(settings_pack::use_disk_cache_pool, true);
+
 		return ret;
 	}

--
2.28.0.windows.1

